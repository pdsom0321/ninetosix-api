# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  S3_BUCKET_NAME: ninetosix-api-deploy

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # Github Repository Secrets를 통해 환경 변수 파일을 생성
      - name: Generate Environment Variables File for Production
        env:
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          AUTH_KEY: ${{ secrets.AUTH_KEY }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo MAIL_USERNAME="$MAIL_USERNAME" >> env.yml &&
          echo MAIL_PASSWORD="$MAIL_PASSWORD" >> env.yml &&
          echo JWT_SECRET_KEY="$JWT_SECRET_KEY" >> env.yml &&
          echo AUTH_KEY="$AUTH_KEY" >> env.yml &&
          echo DB_URL="$DB_URL" >> env.yml &&
          echo DB_USERNAME="$DB_USERNAME" >> env.yml &&
          echo DB_PASSWORD="$DB_PASSWORD" >> env.yml

      # gradlw 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 프로젝트 build
      - name: Build with Gradle
        run: ./gradlew clean build

      # AWS 권한 확인
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # S3에 업로드
      - name: Upload to S3
        run: |
          aws deploy push \
          --application-name ninetosix-codedeploy \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .

      # EC2에 Deploy (code Deploy)
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
          --application-name ninetosix-codedeploy \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ninetosix-codedeploy-group \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip \
          --region ap-northeast-2
